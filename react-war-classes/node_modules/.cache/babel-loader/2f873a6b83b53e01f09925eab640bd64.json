{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alex\\\\Desktop\\\\36-react-war\\\\src\\\\components\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { creatDeck, result } from '../utils/contants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = _ref => {\n  _s();\n\n  let {\n    changePage,\n    getScore\n  } = _ref;\n  const compDeck = [];\n  const playerDeck = [];\n  const compWin = 0;\n  const playerWin = 0;\n  const [compCard, setCompCard] = useState('Computer card');\n  const [playerCard, setPlayerCard] = useState('Player card');\n\n  const handleClickNext = () => {\n    if (this.playerDeck.length) {\n      const comp = compDeck.pop();\n      const player = playerDeck.pop();\n\n      if (comp.rank > player.rank) {\n        compWin++;\n      }\n\n      if (comp.rank < player.rank) {\n        playerWin++;\n      }\n\n      setCompCard(`${comp.rank}, ${comp.suit}`), setPlayerCard(`${player.rank}, ${player.suit}`);\n    } else {\n      changePage(result);\n      getScore([compWin, playerWin]);\n    }\n  };\n\n  const componentDidMount = () => {\n    const deck = creatDeck();\n    deck.sort(() => Math.random() - 0.5);\n    compDeck = deck.slice(0, deck.length / 2);\n    playerDeck = deck.slice(deck.length / 2, deck.length); //  this.handleClickNext();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Computer (\", this.compWin, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: compCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: this.state.playerCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [this.props.nickName, \" (\", playerWin, \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClickNext,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Game, \"axBGSfzQMsLqlIxPwAQex4BEX8c=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","creatDeck","result","Game","changePage","getScore","compDeck","playerDeck","compWin","playerWin","compCard","setCompCard","playerCard","setPlayerCard","handleClickNext","length","comp","pop","player","rank","suit","componentDidMount","deck","sort","Math","random","slice","state","props","nickName"],"sources":["C:/Users/Alex/Desktop/36-react-war/src/components/Game.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { creatDeck, result } from '../utils/contants'\n\nconst Game = ({changePage,getScore}) => {\n  \n     const compDeck = [];\n     const playerDeck = [];\n     const compWin = 0;\n     const playerWin = 0;\n  \n  const [compCard, setCompCard] = useState('Computer card');\n  const [playerCard,setPlayerCard] = useState('Player card')\n\n  const handleClickNext = () => {\n    if (this.playerDeck.length) {\n      const comp = compDeck.pop();\n      const player = playerDeck.pop();\n      if (comp.rank > player.rank) {\n        compWin++;\n      }\n      if (comp.rank < player.rank) {\n        playerWin++;\n      }\n        setCompCard(`${comp.rank}, ${comp.suit}`),\n        setPlayerCard(`${player.rank}, ${player.suit}`)\n    } else {\n      changePage(result);\n      getScore([compWin, playerWin]);\n    }\n\n  }\n\n const componentDidMount = () => {\n    const deck = creatDeck();\n    deck.sort(() => Math.random() - 0.5);\n    compDeck = deck.slice(0, deck.length / 2);\n    playerDeck = deck.slice(deck.length / 2, deck.length);\n  //  this.handleClickNext();\n  }\n\n \n    return (\n      <div>\n        <h2>Computer ({this.compWin})</h2>\n        <p>{compCard}</p>\n        <p>{this.state.playerCard}</p>\n        <h2>{this.props.nickName} ({playerWin})</h2>\n        <button onClick={handleClickNext}>Next</button>\n      </div>\n    )\n  \n\n}\n\nexport default Game"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;;;AAEA,MAAMC,IAAI,GAAG,QAA2B;EAAA;;EAAA,IAA1B;IAACC,UAAD;IAAYC;EAAZ,CAA0B;EAEnC,MAAMC,QAAQ,GAAG,EAAjB;EACA,MAAMC,UAAU,GAAG,EAAnB;EACA,MAAMC,OAAO,GAAG,CAAhB;EACA,MAAMC,SAAS,GAAG,CAAlB;EAEH,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,eAAD,CAAxC;EACA,MAAM,CAACY,UAAD,EAAYC,aAAZ,IAA6Bb,QAAQ,CAAC,aAAD,CAA3C;;EAEA,MAAMc,eAAe,GAAG,MAAM;IAC5B,IAAI,KAAKP,UAAL,CAAgBQ,MAApB,EAA4B;MAC1B,MAAMC,IAAI,GAAGV,QAAQ,CAACW,GAAT,EAAb;MACA,MAAMC,MAAM,GAAGX,UAAU,CAACU,GAAX,EAAf;;MACA,IAAID,IAAI,CAACG,IAAL,GAAYD,MAAM,CAACC,IAAvB,EAA6B;QAC3BX,OAAO;MACR;;MACD,IAAIQ,IAAI,CAACG,IAAL,GAAYD,MAAM,CAACC,IAAvB,EAA6B;QAC3BV,SAAS;MACV;;MACCE,WAAW,CAAE,GAAEK,IAAI,CAACG,IAAK,KAAIH,IAAI,CAACI,IAAK,EAA5B,CAAX,EACAP,aAAa,CAAE,GAAEK,MAAM,CAACC,IAAK,KAAID,MAAM,CAACE,IAAK,EAAhC,CADb;IAEH,CAXD,MAWO;MACLhB,UAAU,CAACF,MAAD,CAAV;MACAG,QAAQ,CAAC,CAACG,OAAD,EAAUC,SAAV,CAAD,CAAR;IACD;EAEF,CAjBD;;EAmBD,MAAMY,iBAAiB,GAAG,MAAM;IAC7B,MAAMC,IAAI,GAAGrB,SAAS,EAAtB;IACAqB,IAAI,CAACC,IAAL,CAAU,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAhC;IACAnB,QAAQ,GAAGgB,IAAI,CAACI,KAAL,CAAW,CAAX,EAAcJ,IAAI,CAACP,MAAL,GAAc,CAA5B,CAAX;IACAR,UAAU,GAAGe,IAAI,CAACI,KAAL,CAAWJ,IAAI,CAACP,MAAL,GAAc,CAAzB,EAA4BO,IAAI,CAACP,MAAjC,CAAb,CAJ6B,CAK/B;EACC,CANF;;EASG,oBACE;IAAA,wBACE;MAAA,yBAAe,KAAKP,OAApB;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UAAIE;IAAJ;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAA,UAAI,KAAKiB,KAAL,CAAWf;IAAf;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE;MAAA,WAAK,KAAKgB,KAAL,CAAWC,QAAhB,QAA4BpB,SAA5B;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF,eAKE;MAAQ,OAAO,EAAEK,eAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAWH,CAjDD;;GAAMX,I;;KAAAA,I;AAmDN,eAAeA,IAAf"},"metadata":{},"sourceType":"module"}